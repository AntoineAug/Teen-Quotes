create table "countries" ("id" integer not null primary key autoincrement, "name" varchar not null);
create unique index countries_name_unique on "countries" ("name");
drop table if exists "users";
create table "users" ("id" integer not null primary key autoincrement, "login" varchar not null, "password" varchar not null, "email" varchar not null, "security_level" integer not null default '0', "ip" varchar not null, "birthdate" date null, "gender" varchar null, "country" varchar null, "city" varchar null, "avatar" varchar null, "about_me" varchar null, "hide_profile" integer not null default '0', "notification_comment_quote" integer not null default '1', "last_visit" datetime null, "remember_token" varchar null, "created_at" datetime not null, "updated_at" datetime not null);
drop table if exists "quotes";
create table "quotes" ("id" integer not null primary key autoincrement, "content" varchar not null, "user_id" integer not null, "approved" integer not null default '0', "created_at" datetime not null, "updated_at" datetime not null, foreign key("user_id") references "users"("id") on delete cascade);
create index quotes_user_id_index on "quotes" ("user_id");
drop table if exists "comments";
create table "comments" ("id" integer not null primary key autoincrement, "content" varchar not null, "quote_id" integer not null, "user_id" integer not null, "created_at" datetime not null, "updated_at" datetime not null, foreign key("quote_id") references "quotes"("id") on delete cascade, foreign key("user_id") references "users"("id") on delete cascade);
create index comments_quote_id_index on "comments" ("quote_id");
create index comments_user_id_index on "comments" ("user_id");
drop table if exists "profile_visitors";
create table "profile_visitors" ("id" integer not null primary key autoincrement, "user_id" integer not null, "visitor_id" integer not null, "created_at" datetime not null, "updated_at" datetime not null, foreign key("user_id") references "users"("id") on delete cascade, foreign key("visitor_id") references "users"("id") on delete cascade);
create index profile_visitors_user_id_index on "profile_visitors" ("user_id");
create index profile_visitors_visitor_id_index on "profile_visitors" ("visitor_id");
drop table if exists "favorite_quotes";
create table "favorite_quotes" ("id" integer not null primary key autoincrement, "quote_id" integer not null, "user_id" integer not null, "created_at" datetime not null, "updated_at" datetime not null, foreign key("quote_id") references "quotes"("id") on delete cascade, foreign key("user_id") references "users"("id") on delete cascade);
create index favorite_quotes_quote_id_index on "favorite_quotes" ("quote_id");
create index favorite_quotes_user_id_index on "favorite_quotes" ("user_id");
drop table if exists "newsletters";
create table "newsletters" ("id" integer not null primary key autoincrement, "user_id" integer not null, "type" varchar not null default 'weekly', "created_at" datetime not null, "updated_at" datetime not null, foreign key("user_id") references "users"("id") on delete cascade);
create index newsletters_user_id_index on "newsletters" ("user_id");
drop table if exists "stories";
create table "stories" ("id" integer not null primary key autoincrement, "represent_txt" text not null, "frequence_txt" text not null, "user_id" integer not null, "created_at" datetime not null, "updated_at" datetime not null, foreign key("user_id") references "users"("id") on delete cascade);
create index stories_user_id_index on "stories" ("user_id");
create table "password_reminders" ("email" varchar not null, "token" varchar not null, "created_at" datetime not null);
create index password_reminders_email_index on "password_reminders" ("email");
create index password_reminders_token_index on "password_reminders" ("token");
drop table if exists "settings";
create table "settings" ("id" integer not null primary key autoincrement, "user_id" integer not null, "key" varchar not null, "value" varchar not null, foreign key("user_id") references "users"("id") on delete cascade);
create index settings_user_id_index on "settings" ("user_id");